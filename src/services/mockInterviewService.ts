import { createAgent, createSession, CreateAgentOptions } from "./beyondPresence";

export interface BuildPromptInput {
  jobTitle?: string;
  companyName?: string;
  jobDescription?: string;
  questions?: string[];
  language?: string; // e.g., "fr-FR" | "en-US"
  style?: "mvp" | "full";
  testLineAtStart?: string; // for quick validation of pre-prompt capture
  customPrompt?: string; // üÜï Pour utiliser un prompt personnalis√© g√©n√©r√© par GPT-4o
}

/**
 * Construit le system_prompt pour l'agent Beyond Presence.
 * Structure: Contexte ‚Üí Objectif ‚Üí R√®gles ‚Üí Donn√©es ‚Üí Questions.
 */
export function buildInterviewSystemPrompt(input: BuildPromptInput): string {
  const {
    jobTitle,
    companyName,
    jobDescription,
    questions,
    style = "mvp",
    testLineAtStart,
    customPrompt, // üÜï Prompt personnalis√© g√©n√©r√© par GPT-4o
  } = input;

  // üÜï Si un prompt personnalis√© est fourni, l'utiliser directement
  if (customPrompt) {
    const headerTest = testLineAtStart
      ? `Au tout d√©but, dis exactement: "${testLineAtStart}"\n\n`
      : "";
    
    return `${headerTest}${customPrompt}`;
  }

  // Sinon, utiliser le template par d√©faut
  const defaultQuestions: string[] = [
    "Pr√©sentez-vous en 60 secondes.",
    "Parlez d'un √©chec et de ce que vous avez appris.",
    "D√©crivez un projet difficile et votre r√¥le.",
    "Pourquoi ce poste et pourquoi notre entreprise ?",
  ];

  const items = (questions && questions.length > 0 ? questions : defaultQuestions)
    .map((q, i) => `${i + 1}) ${q}`)
    .join("\n");

  const headerTest = testLineAtStart
    ? `Au tout d√©but, dis exactement: "${testLineAtStart}"\n\n`
    : "";

  const shortRules = `
### R√®gles
- Une seule question √† la fois
- Relance courte si r√©ponse vague
- Ton bienveillant, concis, orient√© action
- Ignore une question d√©j√† couverte implicitement
- Apr√®s chaque r√©ponse: feedback ‚â§15 mots + note /5
`;

  const extraGuidance = style === "full"
    ? `
### √âvaluation
- Communication (clart√©, concision, structure)
- Technique (pertinence, profondeur, exemples)
- Confiance (ton, assurance, gestion du stress)

### Cl√¥ture
- R√©sume 3 forces et 3 axes d'am√©lioration, avec 3 actions concr√®tes.
`
    : "";

  const jobContext = (jobTitle || companyName || jobDescription)
    ? `
## Contexte poste
- Intitul√©: ${jobTitle ?? "(Non sp√©cifi√©)"}
- Entreprise: ${companyName ?? "(Non sp√©cifi√©e)"}
- JD (extrait): ${jobDescription ? jobDescription.slice(0, 700) : "(Non fourni)"}
`
    : "";

  return `# Contexte\nTu es un avatar d'entra√Ænement √† l'entretien, jouant le r√¥le d'intervieweur bienveillant.\n\n${headerTest}## Objectif\nConduire un entretien structur√© en posant les questions list√©es, une par une.\nApr√®s CHAQUE r√©ponse: donner un mini-feedback (‚â§15 mots) et une note /5.\nTerminer par un bilan final (forces/axes d'am√©lioration).\n${shortRules}${extraGuidance}${jobContext}\n#### Questions\n${items}\n`;
}

export interface CreateMockAgentParams extends Omit<CreateAgentOptions, "system_prompt"> {
  jobTitle?: string;
  companyName?: string;
  jobDescription?: string;
  questions?: string[];
  promptStyle?: "mvp" | "full";
  testLineAtStart?: string;
  customPrompt?: string; // üÜï Prompt personnalis√©
}

/**
 * üÜï G√©n√®re un preprompt personnalis√© bas√© sur le CV utilisateur et l'offre d'emploi
 */
export async function generateCustomPreprompt(
  cvContent: string, 
  jobOffer: { title: string; company: string; description: string },
  userId?: string
): Promise<string> {
  try {
    // Appel √† votre API GPT-4o (√† impl√©menter)
    const response = await fetch('/api/generate-preprompt', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        cv: cvContent,
        jobOffer,
        userId
      })
    });
    
    const data = await response.json();
    return data.preprompt;
  } catch (error) {
    console.error('Erreur g√©n√©ration preprompt:', error);
    // Fallback vers template par d√©faut
    return '';
  }
}

/**
 * Cr√©e un agent Beyond Presence avec un system_prompt construit √† partir de la JD et des questions.
 * üÜï Supporte maintenant les preprompts personnalis√©s g√©n√©r√©s par IA
 */
export async function createMockInterviewAgent(params: CreateMockAgentParams) {
  const {
    jobTitle,
    companyName,
    jobDescription,
    questions,
    promptStyle,
    testLineAtStart,
    customPrompt, // üÜï Preprompt personnalis√©
    ...agentOpts
  } = params;

  const system_prompt = buildInterviewSystemPrompt({
    jobTitle,
    companyName,
    jobDescription,
    questions,
    style: promptStyle ?? "mvp",
    testLineAtStart,
    customPrompt, // üÜï Pass√© √† la fonction de build
  });

  const created = await createAgent({
    ...agentOpts,
    system_prompt,
  });

  return created; // { id, ... }
}

/**
 * D√©marre une session d'entretien pour un agent donn√©.
 * Vous pouvez passer des metadatas (ex: userId, jobContextId) pour tra√ßabilit√©.
 */
export async function startMockInterviewSession(agentId: string, metadata?: Record<string, any>) {
  return createSession(agentId, metadata);
}

/**
 * Convenience: cr√©e l'agent et d√©marre directement la session.
 */
export async function createAndStartMockInterview(params: CreateMockAgentParams, metadata?: Record<string, any>) {
  const agent = await createMockInterviewAgent(params);
  const session = await startMockInterviewSession(agent.id, metadata);
  return { agent, session };
}

/**
 * üÜï WORKFLOW COMPLET: G√©n√®re preprompt personnalis√© + cr√©e agent + d√©marre session
 * Utilisez cette fonction quand vous avez le CV de l'utilisateur
 */
export async function createPersonalizedInterview(
  cvContent: string,
  jobOffer: { title: string; company: string; description: string },
  userId?: string,
  agentOptions?: Partial<CreateMockAgentParams>
) {
  console.log('üß† G√©n√©ration du preprompt personnalis√© avec GPT-4o...');
  
  // 1. G√©n√©rer le preprompt personnalis√©
  const customPrompt = await generateCustomPreprompt(cvContent, jobOffer, userId);
  
  // 2. Cr√©er l'agent avec le preprompt personnalis√©
  const agent = await createMockInterviewAgent({
    jobTitle: jobOffer.title,
    companyName: jobOffer.company,
    jobDescription: jobOffer.description,
    customPrompt, // üÜï Le preprompt g√©n√©r√© par IA
    promptStyle: "full",
    ...agentOptions
  });
  
  // 3. D√©marrer la session
  const session = await startMockInterviewSession(agent.id, { 
    userId, 
    jobTitle: jobOffer.title,
    personalized: true 
  });
  
  console.log('‚úÖ Entretien personnalis√© cr√©√©:', agent.id);
  return { agent, session, customPrompt };
}

